在多线程之间保证共享变量的可见性与一致性，轻量级同步，不需要上下文切换调度
可见性：对一个volatile变量的读，总是能看到其他线程对这个变量最后的修改
原子性（局限）：对该类变量单个的读写操作具有原子性
从JDK1.5之后，volatile变量的读写可以实现线程之间通信：
该类变量写的内存语义：当写一个volatile变量时，JMM会将该线程对应本地内存中共享变量刷新到主内存，实质相当于向接下来要读这个
volatile变量的线程发送（其对共享变量所作修改）的消息
该类变量读的内存语义：当读一个volatile变量时，会将该线程对应本地内存内容设置为无效，重新从主内存读取共享变量，实质
相当于接受了之前某个线程（对共享变量（volatile变量及之前）所做修改）的消息。
JMM避免重排序：第一个为v读时，或者第二个为v写时，不可重排序，第一个为写且第二个为读时也不可


锁：互斥执行特性
临界区的代码互斥执行，具有原子性
释放锁的线程可以向获取锁的线程发送消息
释放锁：将该线程对应本地内存的共享变量刷新到主内存
获取锁：职位无效，从主内存获取共享变量
实现：reentrantLock(volatile变量state)
公平锁：释放锁的最后，写volatile变量state
    获取锁之后，读volatile变量state
非公平锁：
      释放：同上
      获取：使用CAS更新state(cas具有volatile读和写的语义)



final域重排序：
写：在构造函数力对fianl域的写入，与随后将该构造对象的引用赋值给引用变量不能重排序，
    final域的写入在构造函数之内，保证引用对象在对线程可见之前，final域已被正确的初始化
读：初次读取含final域的引用对象，与随后读取这个final域，不能重排序。